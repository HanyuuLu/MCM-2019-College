def draw():
    from matplotlib import pyplot as plt
    # %matplotlib inline
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
    plt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号

    # Pie chart, where the slices will be ordered and plotted counter-clockwise:
    labels = '移动支付', '非移动支付'
    explode = (0, 0.1)
    fig = []
    j = 0
    for i in Monthly:
        fig.append(plt.subplot(2, 2, j+1))
        plt.pie(
            [Monthly[i]['mobilePay'], Monthly[i]['notMobilePay']],
            labels=labels,
            explode=explode,
            autopct='%1.2f%%',
            shadow=True,
            startangle=90,
            textprops={'size': 'large'}
        )
        fig[-1].set_title(i)
        j += 1
    plt.show()
class MonthlyRec:
    def __init__(self):
        self.fileName = "None"
        self.data = []


class UserRecord:
    def __init__(self):
        self.uuid = None
        self.record = list()
# Excel日期类型转换函数
# Excel 日期浮点数
# 时间起点 1900/01/00 00:00:00
# 单位1=1day
# Python time时间浮点数
# 时间起点 1970/01/01 08:00:00
# 单位1=1second
from datetime import datetime
from xlrd import xldate_as_tuple as conv


def getDateTime(date: float, **exception: bool) -> datetime.date:
    try:
        res = conv(float(date), 0)
        return datetime(res[0], res[1], res[2], res[3], res[4], res[5])
    except Exception:
        if exception:
            raise Exception("invaild date input")
        else:
            return None


if __name__ == '__main__':
        print(getDateTime(42773.41667))
import matplotlib.pyplot as plt
import numpy as np
import matplotlib


def draw(data: list) -> None:
    # 中文和负号显示
    matplotlib.rcParams['font.sans-serif'] = ['SimHei']
    matplotlib.rcParams['axes.unicode_minus'] = False
    # 绘制直方图
    xLabel = []
    for i in range(25):
        xLabel.append(str(i))
    xLabel[24] = "未知"
    # plt.hist(data, bins=40, normed=0, facecolor='blue', edgecolor='black', alpha=0.7)
    plt.xlabel("小时")
    plt.ylabel("日均出行数/人次")
    plt.title("日均出行人次数小时分布图")

    rects1 = plt.bar(x=xLabel, height=data, width=0.4,
                     alpha=0.8, color='blue', label="一部门")
    for rect in rects1:
        height = rect.get_height()
        plt.text(rect.get_x() + rect.get_width() / 2, height +
                 1, str(height), ha="center", va="bottom")

    plt.show()


if __name__ == '__main__':

    # data = [2448, 638, 30, 2, 188, 898, 13733, 49587, 74256, 65315, 62844, 57405, 53875,
    #         62657, 66388, 62372, 67779, 79149, 65417, 46006, 46459, 43085, 23213, 5381, 99450]
    draw(data)
import os
import sys
import csv
import dateConvert
import dataType
import time
DataRoot = './data/csv'
# DataRoot = './expdata/'


def getDataSheet():
    timeFlag = time.time()
    global DataRoot
    fileList = []

    for currentDict, subDict, fileName in os.walk(DataRoot):
        for i in fileName:
            fileList.append(i)
    count = 0
    sum = len(fileList)
    res = {}
    for i in fileList:
        print('[info %2d/%2d, %3.2f%%, %4.2f sec] processing %s' % (count, sum, count/sum*100, time.time()-timeFlag, i ))
        with open(os.path.join(currentDict, i), 'r') as rawInput:
            key = int(i[4:8])
            input = csv.reader(rawInput)
            res[key] = {'mobile': 0, 'card': 0, 'other': 0, 'null': 0}
            filter = {'0.0':'mobile','1.0':'card', 'Null': 'null'}
            for raw in input:
                if raw[3] in filter:
                    res[key][filter[raw[3]]] += 1
                else:
                    if raw[0] == 'ID':
                        continue
                    res[key]['other'] += 1
        count += 1
    print('[info %d/%d, %.2f%%, %.2f sec] task finished' %
              (count, sum, count / sum * 100, time.time() - timeFlag))
    for i in res:
        res[i]['mobile'] += res[i]['null']
        del(res[i]['null'])
    return res


def str2int(num: str) -> int:
    try:
       return int(float(num))
    except Exception as e:
        return None


def draw(res):
    import matplotlib.pyplot as plt
    import pylab
    import matplotlib
    pylab.rcParams['figure.figsize'] = (15.0, 8.0)  # 显示大小
    matplotlib.rcParams['font.sans-serif'] = ['SimHei']
    matplotlib.rcParams['axes.unicode_minus'] = False

    label_list = [x for x in res]
    x = [x for x in range(len(res))]
    num_listMobile = [res[x]['mobile'] for x in res]
    num_listCard = [res[x]['card'] for x in res]
    num_listOther = [res[x]['other'] for x in res]
    rects1 = plt.bar(x=x, height=num_listMobile, width=0.5,
                     alpha=0.8, color='green', label="移动支付")
    rects2 = plt.bar(x=x, height=num_listCard, width=0.5,
                     color='blue', label="刷卡", bottom=num_listMobile)
    btm  = []
    for i in range(len(num_listCard)):
        btm.append(num_listCard[i]+num_listMobile[i])
    rects3 = plt.bar(x=x, height=num_listOther, width=1,alpha = 0.5,color = 'red',label = '其他' , bottom = btm)
    plt.ylabel("人次")
    plt.xticks(x, label_list)
    plt.xlabel("日期/d")
    plt.title("日分布")
    plt.legend()
    plt.show()

if __name__ == '__main__':
    res = getDataSheet()
    draw(res)
import os
import sys
import csv
import dateConvert
import dataType
import time
import copy
DataRoot = './data/csv'
# DataRoot = './expdata/'


def writeToFile(src):
    with open('./data/dataByID.csv', 'w', newline='') as out:
        output =csv.writer(out)
        output.writerows(tuple(src.values()))
    # with open('./data/dataByID.csv', 'a', newline='') as out:
    #     output = csv.writer(out)]
    #     for i in
    #     output.writerows([])

def getDataSheet():
    timeFlag = time.time()
    global DataRoot
    fileList = []

    for currentDict, subDict, fileName in os.walk(DataRoot):
        for i in fileName:
            fileList.append(i)
    count = 0
    sum = len(fileList)
    res = {}
    emptyList = []
    for i in range(24):
        emptyList.append(0)
    for i in fileList:
        print('\r[info %2d/%2d, %3.2f%%, %4.2f sec] processing %s'.ljust(60) %
              (count, sum, count/sum*100, time.time()-timeFlag, i),end='')
        with open(os.path.join(currentDict, i), 'r') as rawInput:
            input = csv.reader(rawInput)
            for raw in input:
                try:
                    hour = dateConvert.getDateTime(raw[2]).hour
                except Exception:
                    continue
                id = int(float(raw[0]))
                if id not in res:
                    res[id] = copy.deepcopy(emptyList)
                res[id][hour] += 1
        count += 1
    print('\r                                 ', end='')
    print('\r[info %2d/%2d, %3.2f%%, %4.2f sec] task finished'.ljust(80) %
          (count, sum, count/sum*100, time.time()-timeFlag),end = '')
    return res


def str2int(num: str) -> int:
    try:
       return int(float(num))
    except Exception as e:
        return None


if __name__ == '__main__':
    res = getDataSheet()
    print(len(res))
    writeToFile(res)
import matplotlib
import pylab
import os
import sys
import csv
import dateConvert
import dataType
import time
DataRoot = './data/csv'
# DataRoot = './expdata/'


def getDataSheet():
    timeFlag = time.time()
    global DataRoot
    fileList = []

    for currentDict, subDict, fileName in os.walk(DataRoot):
        for i in fileName:
            fileList.append(i)
    count = 0
    sum = len(fileList)
    resSum = {}
    resMobile = {}
    resNull = {}
    resNotMobile ={}
    for i in fileList:
        print('\r[info %2d/%2d, %3.2f%%, %4.2f sec] processing %s' %
              (count, sum, count/sum*100, time.time()-timeFlag, i),end = '')
        with open(os.path.join(currentDict, i), 'r') as rawInput:
            input = csv.reader(rawInput)
            filter = {'0.0': resMobile, 'Null': resNull}
            for raw in input:
                try:
                    # print(i[4:6])
                    # key = dateConvert.getDateTime(raw[2]).month
                    key = int(i[4:6])
                    # print(key)
                    if key not in resSum:
                        resSum[key] = 0
                        resMobile[key] = 0
                        resNull[key] = 0
                        resNotMobile[key]=0
                    resSum[key] += 1
                    filter[raw[3]][key] += 1
                except Exception:
                    continue
        count += 1
    print('[info %d/%d, %.2f%%, %.2f sec] task finished' %
          (count, sum, count / sum * 100, time.time() - timeFlag))
    print('resSum', resSum)
    print('resMobile',resMobile)
    print('resNull', resNull)
    for i in resSum:
        resMobile[i] += resNull[i]
        resNotMobile[i] = resSum[i] - resMobile[i]
    resMobile = list(resMobile.values())
    resNotMobile = list(resNotMobile.values())

    return resMobile,resNotMobile

def str2int(num: str) -> int:
    try:
       return int(float(num))
    except Exception as e:
        return None
def draw(res):
    from matplotlib import pyplot as plt
    # %matplotlib inline
    plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
    plt.rcParams['axes.unicode_minus']=False #用来正常显示负号

    # Pie chart, where the slices will be ordered and plotted counter-clockwise:
    labels = '移动支付', '非移动支付'
    explode = (0, 0.1)
    fig = []
    j=0
    for i in range(len(res[0])):
        fig.append(plt.subplot(2,2,j+1))
        plt.pie(
            [res[0][i],res[1][i]],
            labels = labels,
            explode = explode,
            autopct = '%1.2f%%',
            shadow = True,
            startangle = 90,
            textprops={'size':'large'}
        )
        fig[-1].set_title(i)
        j+=1
    plt.show()
if __name__ == '__main__':
    res = getDataSheet()
    draw(res)import matplotlib
import pylab
import os
import sys
import csv
import dateConvert
import dataType
import time
import math
import datetime
DataRoot = './data/csv'
# DataRoot = './expdata/'

def getWeekdaysByFilename(filename: str) -> int:
    # print(datetime.datetime(int(filename[0:4]), int(
        # filename[4:6]), int(filename[6:8])).weekday())
    return datetime.datetime(int(filename[0:4]), int(filename[4:6]), int(filename[6:8])).weekday()

def getDataSheet():
    timeFlag = time.time()
    global DataRoot
    fileList = []

    for currentDict, subDict, fileName in os.walk(DataRoot):
        for i in fileName:
            fileList.append(i)
    count = 0
    sum = len(fileList)
    resSum = {}
    resMobile = {}
    resNull = {}
    resNotMobile = {}
    for i in fileList:
        print('\r[info %2d/%2d, %3.2f%%, %4.2f sec] processing %s' %
              (count, sum, count/sum*100, time.time()-timeFlag, i), end='')
        with open(os.path.join(currentDict, i), 'r') as rawInput:
            input = csv.reader(rawInput)
            filter = {'0.0': resMobile, 'Null': resNull}
            for raw in input:
                try:
                    # print(i[4:6])
                    # key = dateConvert.getDateTime(raw[2]).month
                    key = getWeekdaysByFilename(i)
                    # print(key)
                    if key not in resSum:
                        resSum[key] = 0
                        resMobile[key] = 0
                        resNull[key] = 0
                        resNotMobile[key] = 0
                    resSum[key] += 1
                    filter[raw[3]][key] += 1
                except Exception:
                    continue
        count += 1
    print('[info %d/%d, %.2f%%, %.2f sec] task finished' %
          (count, sum, count / sum * 100, time.time() - timeFlag))
    print('resSum', resSum)
    print('resMobile', resMobile)
    print('resNull', resNull)
    for i in resSum:
        resMobile[i] += resNull[i]
        resNotMobile[i] = resSum[i] - resMobile[i]
    resMobile = list(resMobile.values())
    resNotMobile = list(resNotMobile.values())

    return resMobile, resNotMobile


def str2int(num: str) -> int:
    try:
       return int(float(num))
    except Exception as e:
        return None


def draw(res):
    from matplotlib import pyplot as plt
    # %matplotlib inline
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
    plt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号

    # Pie chart, where the slices will be ordered and plotted counter-clockwise:
    labels = '移动支付', '非移动支付'
    explode = (0, 0.1)
    fig = []
    countNumber = len(res[0])
    for i in range(countNumber):
        fig.append(plt.subplot(3, math.ceil(countNumber/3), i+1))
        plt.pie(
            [res[0][i], res[1][i]],
            labels=labels,
            explode=explode,
            autopct='%1.2f%%',
            shadow=True,
            startangle=90,
            textprops={'size': 'large'}
        )
        fig[-1].set_title(i)
    plt.show()


if __name__ == '__main__':
    res = getDataSheet()
    draw(res)
import os
import sys
import csv
import dateConvert
import dataType
import time
import copy
import operator
DataRoot = './data/csv'
# DataRoot = './expdata/'


def writeToFile(src):
    with open('./data/dataByID.csv', 'w', newline='') as out:
        output = csv.writer(out)
        output.writerows(tuple(src.values()))
    # with open('./data/dataByID.csv', 'a', newline='') as out:
    #     output = csv.writer(out)]
    #     for i in
    #     output.writerows([])


def getDataSheet():
    timeFlag = time.time()
    global DataRoot
    fileList = []

    for currentDict, subDict, fileName in os.walk(DataRoot):
        for i in fileName:
            fileList.append(i)
    count = 0
    sum = len(fileList)
    res = {}
    emptyList = []
    for i in range(24):
        emptyList.append(0)
    for i in fileList:
        print('\r[info %2d/%2d, %3.2f%%, %4.2f sec] processing %s'.ljust(60) %
              (count, sum, count/sum*100, time.time()-timeFlag, i), end='')
        with open(os.path.join(currentDict, i), 'r') as rawInput:
            input = csv.reader(rawInput)
            for raw in input:
                try:
                    key = int(float(raw[0]))
                except Exception:
                    continue
                if key not in res:
                    res[key] = [0, 0]
                res[key][0] += 1
                if raw[3] == '0.0' or raw[3] == 'Null':
                    res[key][1] += 1
        count += 1
    print('\r                                 ', end='')
    print('\r[info %2d/%2d, %3.2f%%, %4.2f sec] task finished'.ljust(80) %
          (count, sum, count / sum * 100, time.time() - timeFlag), end='')
    res = list(res.values())
    res.sort(key=operator.itemgetter(0))
    for i in res:
        i[1] = i[1] / i[0]
    sliceDict = {}
    for i in res:
        if i[0] not in sliceDict:
            sliceDict[i[0]] = [0, 0]
        sliceDict[i[0]][0] += 1
        sliceDict[i[0]][1] += i[1]
    for i in sliceDict:
        sliceDict[i][1] = sliceDict[i][1] / sliceDict[i][0]
    print(sliceDict)
    return res


def str2int(num: str) -> int:
    try:
       return int(float(num))
    except Exception as e:
        return None


if __name__ == '__main__':
    res = getDataSheet()
    print(len(res))
    writeToFile(res)
# import os
# import sys
import csv
import random

dataRoot = './data/dataByID.csv'


def distance(item0, item1):
    res = 0
    for i in range(len(item0)):
        res += abs(item0[i] - item1[i])
    return res


def generateKernel(data, kernelNumber):
    kernelList = []
    for _ in range(kernelNumber):
        kernelList.append(data[random.randint(0, len(data))])
    return kernelList


def choose(data, kernelList):
    res = 100000000000000000000000
    for i in kernelList:
        temp = distance(data, i)
        if temp < res:
            key = i
            res = temp
    return kernelList.index(key)


def processData():
    kernelNumber = 6
    print('[info] processing data')
    dataList = []
    originList = []
    for i in range(kernelNumber):
        dataList.append(list())
    # jump = 0
    with open(dataRoot, 'r') as raw:
        input = csv.reader(raw)
        # count = 0
        for i in input:
            originList.append(i)
            # if jump == 100000:
            #     break
            # jump += 1
    for i in range(len(originList)):
        for j in range(len(originList[i])):
            originList[i][j] = int(originList[i][j])
    kernelList = generateKernel(originList, kernelNumber)
    for i in originList:
        dataList[choose(i, kernelList)].append(i)
    return dataList


def average(src):
    print('[info]calculating average')
    res = []
    for i in src:
        temp = []
        for _ in range(24):
            temp.append(0)
        for j in i:
            for key in range(24):
                temp[key] += j[key]
        for k in range(24):
            temp[k] /= len(i)
        res.append(temp)
    return res


def draw(src):
    print('[info] drawing')
    from matplotlib import pyplot as plt
    import math
    for i in range(len(src)):
        plt.subplot(2, math.ceil(len(src) / 2), i+1)
        plt.plot([x for x in range(24)], src[i], 'b-')
    plt.show()


if __name__ == '__main__':
    raw = processData()
    pro = average(raw)
    draw(pro)
def t1(S_sum, freeRate) -> int:
    return S_sum * freeRate
def t2(S_sum, serviceRate) -> int:
    return S_sum * serviceRate
def t3(pay_sum,ad_free) -> int:
    return pay_sum * ad_free / 1000
def t4(sedMoney, s1, r,customerBalance,S_sum) -> int:
    assert len(sedMoney) == 12
    copyCustomerBalance = customerBalance
    for i in range(len(sedMoney)):
        for x in range(1, 12 - i):
            if x % 3 == 1:
                sedMoney[i] = (1 + r) * (1 - s1) * sedMoney[i]
            else:
                sedMoney[i] = (1 + r) * sedMoney[i]
    for x in range(1,13):
        if x % 3 == 1:
            customerBalance = (1 + r) * (1 - s1) * customerBalance
        else:
            customerBalance = (1 + r) * customerBalance
    return customerBalance - copyCustomerBalance - S_sum + sum(sedMoney)
def o1(v_machine, v_maintain, n_machine, s) -> int:
    return n_machine * (v_machine + v_maintain) + s

def o2(n_ad, v_ad) -> int:
    return n_ad * v_ad
def w(input):
    return \
        t1(input['sum'], input['freeRate']) +\
        t2(input['sum'], input['serviceRate']) + \
        t3(input['paySum'], input['adFree']) + \
        t4(input['sedMoney'], input['s1'], input['r'], input['customerBalance'], input['S_sum']) - \
        o1(input['v_machine'], input['v_maintain'], input['n_machine'], input['s']) - \
        o2(input['n_ad'],input['v_ad'])



if __name__ == '__main__':
    input = {
        "S_sum": None,  # 年度营业额
        'freeRate': None,  # 手续费费率
        'serviceRate': None,  # 服务费费率
        'pay_sum': None,  # 交易笔数
        'ad_free':None, # 广告费用/每一千次观看
        'customerBalance': None,  # 总用户余额
        'sedMoney': list(),  # 月营业额
        'n_machine': None,  # 机器数量
        'v_machine': None,  # 机器单价
        'v_maintain': None,  # 维护单价
        's': None,   # 劳动力成本
        'n_ad': None,  # 广告数量
        'v_ad': None,  # 广告单价
        'r': None,  # 沉淀资金增长率
        's1':None,  # 银行手续费
    }
    input['sedMoney'] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0]
    input['S_sum'] = 200
    input['s1'] = 0.001
    input['r'] = 0.01
    input['customerBalance'] = 100
    print(t4(input['sedMoney'], input['s1'], input['r'],
             input['customerBalance'], input['S_sum']))

